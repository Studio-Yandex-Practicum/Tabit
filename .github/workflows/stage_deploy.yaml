name: Deploy to Stage

on:
  push:
    branches:
      - dev
      - feature/cicd-setup
  workflow_run:
    workflows: ["Build and Push"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set lowercase IMAGE_NAME
        run: echo "IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image for Stage
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/feature/cicd-setup'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/stage/stage.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Stopping old containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if systemctl list-units --full -all | grep -q "tabit.service"; then
              STATUS="$(systemctl is-active tabit.service)"
              if [ "${STATUS}" = "active" ]; then
                sudo systemctl stop tabit.service
                echo "Stopping old containers"
              else
                echo "No active containers"
              fi
            else
              echo "Service tabit.service does not exist, skipping stop"
            fi

      - name: Clean infra folder before copying
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            find /home/${{ secrets.USERNAME }}/tabit -mindepth 1 -maxdepth 1 ! -name ".ssh" -exec rm -rf {} +
            mkdir -p /home/${{ secrets.USERNAME }}/tabit

      - name: Check files before copying
        run: |
          echo "Checking infra directory:"
          ls -la infra/
          echo "Checking pyproject.toml and poetry.lock:"
          ls -la pyproject.toml poetry.lock || echo "Files not found!"

      - name: Copy infra via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" infra/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/tabit/infra/
            rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" pyproject.toml ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/tabit/
            rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" poetry.lock ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.USERNAME }}/tabit/

      - name: Configure environment variables on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.USERNAME }}/tabit/infra/stage/
            touch .env
            if [[ -z "${{ secrets.ENV_FILE }}" ]]; then
              echo "Error: ENV_FILE is not set!"
              exit 1
            fi
            echo "${{ secrets.ENV_FILE }}" > .env

      - name: Restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.USERNAME }}/tabit/infra/stage/
            sudo systemctl daemon-reload
            sudo systemctl restart tabit.service
            docker compose -f docker-compose.stage.yaml down
            docker compose -f docker-compose.stage.yaml pull
            docker compose -f docker-compose.stage.yaml up -d --force-recreate

      - name: Delete unnecessary files (after deploy)
        run: |
          rm -rf tabit/infra/stage
          rm -rf tabit/infra/dev
