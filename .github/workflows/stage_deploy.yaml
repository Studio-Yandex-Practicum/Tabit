name: Deploy to Stage

on:
  push:
    branches:
      - dev
      - feature/cicd-setup

env:
  DEPLOY_PATH: /home/dev_deploy/app

jobs:
  deploy:
    name: Deploy changes on server
    needs: [build_and_push]
    runs-on: ubuntu-latest
    environment:
      name: stage_deploy
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH key if provided
      run: |
        if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          eval $(ssh-agent -s)
          ssh-add private_key.pem
        else
          echo "No SSH key found, skipping SSH setup."
        fi

    - name: Stopping old containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          STATUS="$(systemctl is-active our_service.service)"
          if [ "${STATUS}" = "active" ]; then
            sudo systemctl stop our_service.service
            echo "Stopping old containers"
          else
            echo "No active containers"
          fi

    - name: Copy infra via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "infra/stage/"
        target: "${{ env.DEPLOY_PATH }}/infra/stage"
        rm: true
        strip_components: 1

    - name: Execute commands on VPS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd ${{ env.DEPLOY_PATH }}

          touch .env
          echo "${{ secrets.ENV_FILE }}" > .env

          cd infra/stage/
          docker system prune --force

          sudo docker compose -f infra/stage/docker-compose.stage.yaml up -d

          sudo systemctl is-active --quiet tabit.service
          until [ $? -eq 0 ]; do
            echo "Waiting for tabit.service to be active..."
            sleep 5
            sudo systemctl is-active --quiet tabit.service
          done

          echo "tabit service is active"

          docker exec tabit alembic -c /app/alembic.ini upgrade head